#!/usr/local/bin/php-cgi -q
<?php
/*
 * rc.update_urltables
 *
 * part of pfSense (https://www.pfsense.org)
 * Copyright (c) 2010-2016 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 *
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgment:
 *    "This product includes software developed by the pfSense Project
 *    for use in the pfSenseÂ® software distribution. (http://www.pfsense.org/).
 *
 * 4. The names "pfSense" and "pfSense Project" must not be used to
 *    endorse or promote products derived from this software without
 *    prior written permission. For written permission, please contact
 *    coreteam@pfsense.org.
 *
 * 5. Products derived from this software may not be called "pfSense"
 *    nor may "pfSense" appear in their names without prior written
 *    permission of the Electric Sheep Fencing, LLC.
 *
 * 6. Redistributions of any form whatsoever must retain the following
 *    acknowledgment:
 *
 * "This product includes software developed by the pfSense Project
 * for use in the pfSense software distribution (http://www.pfsense.org/).
 *
 * THIS SOFTWARE IS PROVIDED BY THE pfSense PROJECT ``AS IS'' AND ANY
 * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE pfSense PROJECT OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 */

require_once("config.inc");
require_once("util.inc");
require_once("pfsense-utils.inc");

if (!is_array($config['aliases']['alias'])) {
	// No aliases
	return;
}

// Gather list of urltable aliases
$todo = array();
foreach ($config['aliases']['alias'] as $alias) {
	if (preg_match('/urltable/i', $alias['type'])) {
		$tmp = array();
		$tmp['type'] = $alias['type'];
		$tmp['name'] = $alias['name'];
		$tmp['url']  = $alias['url'];
		$tmp['freq'] = $alias['updatefreq'];
		$todo[] = $tmp;
	}
}

if (count($todo) > 0) {
	log_error("{$argv[0]}: Starting up.");

	if ($argv[1] != "now") {
		// Wait a little before updating.
		$wait = mt_rand(5, 60);
		log_error("{$argv[0]}: Sleeping for {$wait} seconds.");
		sleep($wait);
	}

	// Set whether or not to force the table update before it's time.
	if (!empty($argv[2]) && ($argv[2] == "forceupdate")) {
		$forceupdate = true;
	} else {
		$forceupdate = false;
	}

	log_error("{$argv[0]}: Starting URL table alias updates");

	$filter_reload = false;
	foreach ($todo as $t) {

		// Update a specifically named URL table only.
		if (!empty($argv[3]) && ($argv[3] != $t['name'])) {
			continue;
		}

		$r = process_alias_urltable($t['name'], $t['type'], $t['url'], $t['freq'], $forceupdate);
		if ($r == 1) {
			$result = "";
			// TODO: Change it when pf supports tables with ports
			if ($t['type'] == "urltable") {
				exec("/sbin/pfctl -t " . escapeshellarg($t['name']) . " -T replace -f /var/db/aliastables/" . escapeshellarg($t['name']) . ".txt 2>&1", $result);
			} else {
				$filter_reload = true;
			}
			log_error("{$argv[0]}: Updated {$t['name']} content from {$t['url']}: {$result[0]}");
		} elseif ($r == -1) {
			log_error("{$argv[0]}: {$t['name']} does not need updating.");
		} else {
			log_error("{$argv[0]}: ERROR: could not update {$t['name']} content from {$t['url']}");
		}
	}

	if ($filter_reload) {
		send_event("filter reload");
	}
}
?>
